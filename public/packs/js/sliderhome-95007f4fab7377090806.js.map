{"version":3,"file":"js/sliderhome-95007f4fab7377090806.js","sources":["webpack:///webpack/bootstrap","webpack:///./app/javascript/packs/sliderhome.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/packs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/javascript/packs/sliderhome.js\");\n","// Slider(all Slides in a container)\nconst slider = document.querySelector(\".slider\")\n// All trails\nconst trail = document.querySelector(\".trail\").querySelectorAll(\"div\")\n\n// Transform value\nlet value = 0\n// trail index number\nlet trailValue = 0\n// interval (Duration)\nlet interval = 4000\n\n// Function to slide forward\nconst slide = (condition) => {\n    // CLear interval\n    clearInterval(start)\n    // update value and trailValue\n    condition === \"increase\" ? initiateINC() : initiateDEC()\n    // move slide\n    move(value, trailValue)\n    // Restart Animation\n    animate()\n    // start interal for slides back\n    start = setInterval(() => slide(\"increase\"), interval);\n}\n\n// function for increase(forward, next) configuration\nconst initiateINC = () => {\n    // Remove active from all trails\n    trail.forEach(cur => cur.classList.remove(\"active\"))\n    // increase transform value\n    value === 80 ? value = 0 : value += 20\n    // update trailValue based on value\n    trailUpdate()\n}\n\n// function for decrease(backward, previous) configuration\nconst initiateDEC = () => {\n     // Remove active from all trails\n    trail.forEach(cur => cur.classList.remove(\"active\"))\n    // decrease transform value\n    value === 0 ? value = 80 : value -= 20\n     // update trailValue based on value\n    trailUpdate()\n}\n\n// function to transform slide\nconst move = (S, T) => {\n    // transform slider\n    slider.style.transform = `translateX(-${S}%)`\n    //add active class to the current trail\n    trail[T].classList.add(\"active\")\n}\n\nconst tl = gsap.timeline({defaults: {duration: 0.6, ease: \"power2.inOut\"}})\ntl.from(\".bg\", {x: \"-100%\", opacity: 0})\n  .from(\"p\", {opacity: 0}, \"-=0.3\")\n  .from(\"h1\", {opacity: 0, y: \"30px\"}, \"-=0.3\")\n  .from(\"button\", {opacity: 0, y: \"-40px\"}, \"-=0.8\")\n\n// function to restart animation\nconst animate = () => tl.restart()\n\n// function to update trailValue based on slide value\nconst trailUpdate = () => {\n    if (value === 0) {\n        trailValue = 0\n    } else if (value === 20) {\n        trailValue = 1\n    } else if (value === 40) {\n        trailValue = 2\n    } else if (value === 60) {\n        trailValue = 3\n    } else {\n        trailValue = 4\n    }\n}\n\n// Start interval for slides\nlet start = setInterval(() => slide(\"increase\"), interval)\n\n// Next  and  Previous button function (SVG icon with different classes)\ndocument.querySelectorAll(\"svg\").forEach(cur => {\n    // Assign function based on the class Name(\"next\" and \"prev\")\n    cur.addEventListener(\"click\", () => cur.classList.contains(\"next\") ? slide(\"increase\") : slide(\"decrease\"))\n})\n\n// function to slide when trail is clicked\nconst clickCheck = (e) => {\n    // CLear interval\n    clearInterval(start)\n    // remove active class from all trails\n    trail.forEach(cur => cur.classList.remove(\"active\"))\n    // Get selected trail\n    const check = e.target\n    // add active class\n    check.classList.add(\"active\")\n\n    // Update slide value based on the selected trail\n    if(check.classList.contains(\"box1\")) {\n        value = 0\n    } else if (check.classList.contains(\"box2\")) {\n        value = 20\n    } else if (check.classList.contains(\"box3\")) {\n        value = 40\n    } else if (check.classList.contains(\"box4\")) {\n        value = 60\n    } else {\n        value = 80\n    }\n    // update trail based on value\n    trailUpdate()\n    // transfrom slide\n    move(value, trailValue)\n    // start animation\n    animate()\n    // start interval\n    start = setInterval(() => slide(\"increase\"), interval)\n}\n\n// Add function to all trails\ntrail.forEach(cur => cur.addEventListener(\"click\", (ev) => clickCheck(ev)))\n\n// Mobile touch Slide Section\nconst touchSlide = (() => {\n    let start, move, change, sliderWidth\n\n    // Do this on initial touch on screen\n    slider.addEventListener(\"touchstart\", (e) => {\n        // get the touche position of X on the screen\n        start = e.touches[0].clientX\n        // (each slide with) the width of the slider container divided by the number of slides\n        sliderWidth = slider.clientWidth/trail.length\n    })\n\n    // Do this on touchDrag on screen\n    slider.addEventListener(\"touchmove\", (e) => {\n        // prevent default function\n        e.preventDefault()\n        // get the touche position of X on the screen when dragging stops\n        move = e.touches[0].clientX\n        // Subtract initial position from end position and save to change variabla\n        change = start - move\n    })\n\n    const mobile = (e) => {\n        // if change is greater than a quarter of sliderWidth, next else Do NOTHING\n        change > (sliderWidth/4)  ? slide(\"increase\") : null;\n        // if change * -1 is greater than a quarter of sliderWidth, prev else Do NOTHING\n        (change * -1) > (sliderWidth/4) ? slide(\"decrease\") : null;\n        // reset all variable to 0\n        [start, move, change, sliderWidth] = [0,0,0,0]\n    }\n    // call mobile on touch end\n    slider.addEventListener(\"touchend\", mobile)\n})()\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClsourceRoot":""}